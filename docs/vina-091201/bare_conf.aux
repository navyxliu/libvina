\relax 
\citation{cml}
\citation{gmapreduce}
\citation{erlang}
\citation{haskell}
\citation{openmp}
\citation{tbb}
\citation{cuda}
\citation{sequoia}
\citation{merge}
\citation{ThiesKA02}
\citation{tcpl}
\@LN@col{1}
\@writefile{toc}{\contentsline {section}{\numberline {I}Introduction}{1}}
\newlabel{sec:Intro}{{I}{1}}
\@LN@col{2}
\citation{c++98}
\citation{c++03}
\citation{c++0x}
\citation{tuningfrm}
\@LN@col{1}
\@writefile{toc}{\contentsline {section}{\numberline {II}Template-based Programming model}{2}}
\newlabel{sec:model}{{II}{2}}
\@LN@col{2}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Overview of template-based programming model: Programmers write side-effect free functions in C/C++, then encapsulate them in function wrappers. Template library regards a function wrapper as a task, which is automatically transformed into a group of subtasks based on appropriate parallel patterns. Finally, subtasks directly run on physical multicores.}}{2}}
\newlabel{fig:overview}{{1}{2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {\unhbox \voidb@x \hbox {II-A}}TF Class}{2}}
\newlabel{sect:tf}{{\unhbox \voidb@x \hbox {II-A}}{2}}
\citation{larrabee}
\citation{cellbe}
\citation{imagine}
\@LN@col{1}
\@writefile{toc}{\contentsline {subsection}{\numberline {\unhbox \voidb@x \hbox {II-B}}View class}{3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {\unhbox \voidb@x \hbox {II-C}}Buiding block class}{3}}
\newlabel{sect:bb}{{\unhbox \voidb@x \hbox {II-C}}{3}}
\@LN@col{2}
\@writefile{lof}{\contentsline {figure}{\numberline {2}{\ignorespaces The relationship of view classes. A concrete line represents a valid type cast, while a dashed line represents a source node can generate objects of the type pointed to. Labels specify how signals are created or copied across views.}}{3}}
\newlabel{fig:view}{{2}{3}}
\@writefile{lot}{\contentsline {table}{\numberline {I}{\ignorespaces Build block classes in libvina}}{3}}
\newlabel{tbl:bb}{{I}{3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {\unhbox \voidb@x \hbox {II-D}}Example I: Hierarchy Pattern}{3}}
\@LN@col{1}
\@writefile{lol}{\contentsline {lstlisting}{source/sgemm.cc}{4}}
\@writefile{lof}{\contentsline {figure}{\numberline {3}{\ignorespaces Source code of matrix multiplication (class SGEMM) using hierarchy pattern.}}{4}}
\newlabel{fig:sgemm}{{3}{4}}
\@LN@col{2}
\@writefile{lof}{\contentsline {figure}{\numberline {4}{\ignorespaces An illustration of recursively dividing the task of matrix multiplication into subtasks. The original task is automatically divided into a number of subtasks at compile time. The division is implemented in Fig.\nobreakspace  {}3\hbox {}. Here the parameter $K$ is set to 2. As a result, each task is divided into 4 subtasks. }}{4}}
\newlabel{fig:mmexample}{{4}{4}}
\@writefile{lol}{\contentsline {lstlisting}{source/langpipe.cc}{4}}
\@writefile{lof}{\contentsline {figure}{\numberline {5}{\ignorespaces Source code of a pipeline pattern (langpipe).}}{4}}
\newlabel{fig:pipe}{{5}{4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {\unhbox \voidb@x \hbox {II-E}}Example II: Pipeline Pattern}{4}}
\citation{tempmetaprog}
\citation{moderncpp}
\citation{opencl}
\citation{merge}
\@LN@col{1}
\@writefile{toc}{\contentsline {section}{\numberline {III}Adaption for Libvina}{5}}
\newlabel{sec:adaption}{{III}{5}}
\@writefile{toc}{\contentsline {subsection}{\numberline {\unhbox \voidb@x \hbox {III-A}}Function Wrapper}{5}}
\@writefile{toc}{\contentsline {subsection}{\numberline {\unhbox \voidb@x \hbox {III-B}}Adaption for TF\_hierarchy}{5}}
\@writefile{lof}{\contentsline {figure}{\numberline {6}{\ignorespaces Instantiation process of {\tt  TF\_hierarchy}. The predicate is a template class, which is evaluted using {\tt  TASK}'s parameters.}}{5}}
\newlabel{fig:hierarchy}{{6}{5}}
\@LN@col{2}
\@writefile{lof}{\contentsline {figure}{\numberline {7}{\ignorespaces Pipeline processing using ViewMTs. Access to a {\tt  ReadViewMT} is blocking until it is signaled. A stage sets its signal of {\tt  WriteViewMT} after data processing is complete.}}{5}}
\newlabel{fig:viewmt}{{7}{5}}
\@writefile{toc}{\contentsline {subsection}{\numberline {\unhbox \voidb@x \hbox {III-C}}Adaption for TF\_pipeline}{5}}
\@writefile{toc}{\contentsline {section}{\numberline {IV}Implementation}{5}}
\newlabel{sec:details}{{IV}{5}}
\@writefile{toc}{\contentsline {subsection}{\numberline {\unhbox \voidb@x \hbox {IV-A}}Buiding Block Classes}{5}}
\citation{vartemp}
\citation{c++0x}
\@LN@col{1}
\@writefile{toc}{\contentsline {subsection}{\numberline {\unhbox \voidb@x \hbox {IV-B}}TF class}{6}}
\@writefile{toc}{\contentsline {section}{\numberline {V}Experiment}{6}}
\newlabel{sec:eval}{{V}{6}}
\@writefile{toc}{\contentsline {subsection}{\numberline {\unhbox \voidb@x \hbox {V-A}}Methodology}{6}}
\newlabel{sectn:method}{{\unhbox \voidb@x \hbox {V-A}}{6}}
\@LN@col{2}
\@writefile{lof}{\contentsline {figure}{\numberline {8}{\ignorespaces Speedup of hierarchical transformation on Harpertown: We utilize TF\_hierarchy class to divide tasks until they meet LLC.}}{6}}
\newlabel{fig:spdx86}{{8}{6}}
\@writefile{lot}{\contentsline {table}{\numberline {II}{\ignorespaces Experimental platforms}}{6}}
\newlabel{tbl:mach}{{II}{6}}
\@writefile{toc}{\contentsline {subsection}{\numberline {\unhbox \voidb@x \hbox {V-B}}Evaluation}{6}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {\unhbox \voidb@x \hbox {V-B}1}Speedup of Hierarchical transformation on CPU}{6}}
\citation{nvopencl}
\citation{Fatahalian08}
\@LN@col{1}
\@writefile{lof}{\contentsline {figure}{\numberline {9}{\ignorespaces Speedup Comparing GPU with CPU: We exploit the same set of template classes to transform tasks for different mulitcores}}{7}}
\newlabel{fig:spdgpu}{{9}{7}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {\unhbox \voidb@x \hbox {V-B}2}Speedup of SPMD transformation on GPU}{7}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {\unhbox \voidb@x \hbox {V-B}3}Comparison between different multicores}{7}}
\@LN@col{2}
\@writefile{lot}{\contentsline {table}{\numberline {III}{\ignorespaces Comparison of sgemm on CPU and GPU}}{7}}
\newlabel{tbl:sgemm}{{III}{7}}
\@writefile{lof}{\contentsline {figure}{\numberline {10}{\ignorespaces Pipeline Processing for Psuedo Language Translation: improvement of 4-stage pipeline on CPU.}}{7}}
\newlabel{fig:pipe}{{10}{7}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {\unhbox \voidb@x \hbox {V-B}4}Pipeline Transformation for CPU}{7}}
\citation{openmp}
\citation{sequoia}
\citation{sequoia-compiler}
\citation{merge}
\bibstyle{ieeetran}
\bibdata{../libvina}
\@LN@col{1}
\@writefile{toc}{\contentsline {section}{\numberline {VI}Related work}{8}}
\newlabel{sec:related}{{VI}{8}}
\@LN@col{2}
\@writefile{toc}{\contentsline {section}{\numberline {VII}Discussion and Future work}{8}}
\newlabel{sec:con}{{VII}{8}}
\bibcite{cml}{1}
\bibcite{gmapreduce}{2}
\bibcite{erlang}{3}
\bibcite{haskell}{4}
\bibcite{openmp}{5}
\bibcite{tbb}{6}
\bibcite{cuda}{7}
\bibcite{sequoia}{8}
\bibcite{merge}{9}
\bibcite{ThiesKA02}{10}
\bibcite{tcpl}{11}
\bibcite{c++98}{12}
\bibcite{c++03}{13}
\bibcite{c++0x}{14}
\bibcite{tuningfrm}{15}
\bibcite{larrabee}{16}
\bibcite{cellbe}{17}
\bibcite{imagine}{18}
\bibcite{tempmetaprog}{19}
\bibcite{moderncpp}{20}
\bibcite{opencl}{21}
\bibcite{vartemp}{22}
\bibcite{nvopencl}{23}
\bibcite{Fatahalian08}{24}
\bibcite{sequoia-compiler}{25}
\@LN@col{1}
\@writefile{toc}{\contentsline {section}{References}{9}}
\@LN@col{2}
